[
    {
        "id": 307,
        "plus": true,
        "title": "Avoiding Duplicates",
        "excerpt": "Every time we launch Notes, the persistent store is seeded with data. That's not what we want as it results in duplicates. In this episode, you learn how to easily avoid duplicates and how to start with a clean slate if you decide you no longer need seed data.",
        "swift": 4,
        "xcode": 9,
        "platform_name": "ios",
        "platform_version": 11,
        "author": "Jim Johnson",
        "thumbnail_url": "https://cocoacasts.s3.amazonaws.com/seeding-a-core-data-persistent-store-avoiding-duplicates/seeding-a-core-data-persistent-store-avoiding-duplicates.svg",
        "collection": "Seeding a Core Data Persistent Store",
        "category": "Core Data",
        "duration": 426,
        "published_at": "2018-02-13T05:30:00+00:00"
    },
    {
        "id": 306,
        "plus": true,
        "title": "Seeding Data Asynchronously",
        "excerpt": "We successfully seeded the Core Data persistent store with hard-coded seed data in the previous episode. While the implementation works fine, it isn't perfect. Seeding the persistent store takes place on the main thread. We invoke the `seed()` method in the `viewDidLoad()` method of the `NotesViewController` class and we insert the managed objects into the main managed object context of the Core Data manager.",
        "swift": 4,
        "xcode": 9,
        "platform_name": "ios",
        "platform_version": 11,
        "author": "Jim Johnson",
        "thumbnail_url": "https://cocoacasts.s3.amazonaws.com/seeding-a-core-data-persistent-store-seeding-data-asynchronously/seeding-a-core-data-persistent-store-seeding-data-asynchronously.svg",
        "collection": "Seeding a Core Data Persistent Store",
        "category": "Core Data",
        "duration": 426,
        "published_at": "2018-02-12T05:30:00+00:00"
    },
    {
        "id": 305,
        "plus": false,
        "title": "Conditionals",
        "excerpt": "Control flow is an essential aspect of any programming language. In this and the next episode, we discuss loops and conditionals. We start with conditionals.",
        "swift": 4,
        "xcode": 9,
        "platform_name": "ios",
        "platform_version": 11,
        "author": "Jim Johnson",
        "thumbnail_url": "https://cocoacasts.s3.amazonaws.com/swift-fundamentals-conditionals/swift-fundamentals-conditionals.svg",
        "collection": "Swift Fundamentals",
        "category": "Swift",
        "duration": 426,
        "published_at": "2018-02-11T05:30:00+00:00"
    },
    {
        "id": 303,
        "plus": false,
        "title": "Tuples",
        "excerpt": "Earlier in this series, we covered arrays, sets, and dictionaries. Collections are ideal for storing objects of the same type. Remember that Swift is very strict about type safety. That's why you're not allowed to store a string in an array of integers.",
        "swift": 4,
        "xcode": 9,
        "platform_name": "ios",
        "platform_version": 11,
        "author": "Jim Johnson",
        "thumbnail_url": "https://cocoacasts.s3.amazonaws.com/swift-fundamentals-tuples/swift-fundamentals-tuples.svg",
        "collection": "Swift Fundamentals",
        "category": "Swift",
        "duration": 426,
        "published_at": "2018-02-10T05:30:00+00:00"
    },
    {
        "id": 304,
        "plus": true,
        "title": "Hard-Coding Seed Data",
        "excerpt": "Seeding a Core Data persistent store with hard-coded seed data is fast and easy. The application we'll be seeding with data in this episode is Notes, the application we build in [Core Data Fundamentals](https://cocoacasts.com/series/core-data-fundamentals). Download the starter project of this episode if you'd like to follow along.",
        "swift": 4,
        "xcode": 9,
        "platform_name": "ios",
        "platform_version": 11,
        "author": "Jim Johnson",
        "thumbnail_url": "https://cocoacasts.s3.amazonaws.com/seeding-a-core-data-persistent-store-hard-coding-seed-data/seeding-a-core-data-persistent-store-hard-coding-seed-data.svg",
        "collection": "Seeding a Core Data Persistent Store",
        "category": "Core Data",
        "duration": 426,
        "published_at": "2018-02-07T05:30:00+00:00"
    },
    {
        "id": 302,
        "plus": false,
        "title": "Three Strategies",
        "excerpt": "Seeding an application with data can be helpful for a wide range of reasons, including unit and performance testing. As a developer, seeding an application is simply convenient during development. You want to see and experience what the application feels like with data in it, without having to enter that data in by hand. How does the application perform with hundreds or thousands of records? What is the user experience like?",
        "swift": 4,
        "xcode": 9,
        "platform_name": "ios",
        "platform_version": 11,
        "author": "Jim Johnson",
        "thumbnail_url": "https://cocoacasts.s3.amazonaws.com/seeding-a-core-data-persistent-store-three-strategies/seeding-a-core-data-persistent-store-three-strategies.svg",
        "collection": "Seeding a Core Data Persistent Store",
        "category": "Core Data",
        "duration": 426,
        "published_at": "2018-02-06T05:30:00+00:00"
    },
    {
        "id": 301,
        "plus": true,
        "title": "Type Methods",
        "excerpt": "Developers often complain that Core Data has an arcane syntax and complicated API. \"It's tedious to work with Core Data.\" seems to be the general consensus. It's true that Core Data *used to be* difficult to use and the framework's syntax wasn't as elegant as it could be. That's something of the past, though. The more Core Data matures, the more I enjoy and appreciate the framework.\r\n\r\nFirst impressions are difficult to change and it's therefore unsurprising that developers often fall back to third party libraries. Using a third party library to interact with a first party framework [isn't something I recommend](https://cocoacasts.com/dont-use-a-core-data-library/).\r\n\r\nMany of us find fetching records from a persistent store to be clunky and tedious. Is that true? In this series, I'd like to show you how easy and elegant fetching records from a persistent store can be.",
        "swift": 4,
        "xcode": 9,
        "platform_name": "ios",
        "platform_version": 11,
        "author": "Jim Johnson",
        "thumbnail_url": "https://cocoacasts.s3.amazonaws.com/fetching-records-with-core-data-type-methods/fetching-records-with-core-data-type-methods.svg",
        "collection": "Fetching Records With Core Data",
        "category": "Core Data",
        "duration": 426,
        "published_at": "2018-02-05T05:30:00+00:00"
    },
    {
        "id": 298,
        "plus": false,
        "title": "Working With Optionals",
        "excerpt": "Optionals are an integral aspect of Swift development. They highlight a core concept of the Swift language. Safety.\r\n\r\nAt first glance, optionals look inconvenient and a necessary evil of Swift development. That's true if safety isn't high on your list of priorities. Unless you embrace optionals and what they represent, working with Swift will be a struggle and it will end in frustration.",
        "swift": 4,
        "xcode": 9,
        "platform_name": "ios",
        "platform_version": 11,
        "author": "Jim Johnson",
        "thumbnail_url": "https://cocoacasts.s3.amazonaws.com/swift-fundamentals-working-with-optionals/swift-fundamentals-working-with-optionals.svg",
        "collection": "Swift Fundamentals",
        "category": "Swift",
        "duration": 426,
        "published_at": "2018-02-04T05:30:00+00:00"
    },
    {
        "id": 297,
        "plus": false,
        "title": "Optionals",
        "excerpt": "One of Swift's core features is safety and optionals tie neatly into that mindset. Developers new to Swift tend to struggle with optionals. Optionals are often seen as a hindrance instead of a powerful concept of the Swift language.\r\n\r\nA common question developers have when they learn about optionals is \"Why?\" In this episode of Swift Fundamentals, we take a close look at optionals. Let's start with the obvious question \"What is an optional?\"",
        "swift": 4,
        "xcode": 9,
        "platform_name": "ios",
        "platform_version": 11,
        "author": "Jim Johnson",
        "thumbnail_url": "https://cocoacasts.s3.amazonaws.com/swift-fundamentals-optionals/swift-fundamentals-optionals.svg",
        "collection": "Swift Fundamentals",
        "category": "Swift",
        "duration": 426,
        "published_at": "2018-02-03T05:30:00+00:00"
    },
    {
        "id": 297,
        "plus": false,
        "title": "Optionals",
        "excerpt": "One of Swift's core features is safety and optionals tie neatly into that mindset. Developers new to Swift tend to struggle with optionals. Optionals are often seen as a hindrance instead of a powerful concept of the Swift language.\r\n\r\nA common question developers have when they learn about optionals is \"Why?\" In this episode of Swift Fundamentals, we take a close look at optionals. Let's start with the obvious question \"What is an optional?\"",
        "swift": 4,
        "xcode": 9,
        "platform_name": "ios",
        "platform_version": 11,
        "author": "Jim Johnson",
        "thumbnail_url": "https://cocoacasts.s3.amazonaws.com/swift-fundamentals-optionals/swift-fundamentals-optionals.svg",
        "collection": "Swift Fundamentals",
        "category": "Swift",
        "duration": 426,
        "published_at": "2018-02-03T05:30:00+00:00"
    }
]