[
    {
        "id": 317,
        "plus": false,
        "title": "Debugging Applications With Reveal",
        "excerpt": "In [Debugging Applications With Xcode](https://cocoacasts.com/series/debugging-applications-with-xcode), we explored [Xcode's built-in view debugger](https://cocoacasts.com/debugging-applications-with-xcode-view-and-view-controller-debugging). While I occasionally use Xcode's view debugger to debug user interface issues, I mostly use [Reveal](https://revealapp.com/), a third party application developed and maintained by [Itty Bitty Apps](http://www.ittybittyapps.com/). In this episode, I show you how Reveal compares to Xcode's built-in view debugger and why I prefer Reveal over Xcode to debug user interface issues.",
        "swift": 4,
        "xcode": 9,
        "platform_name": "ios",
        "platform_version": 11,
        "author": "Jim Johnson",
        "thumbnail_url": "https://cocoacasts.s3.amazonaws.com/debugging-applications-with-reveal/debugging-applications-with-reveal.svg",
        "collection": null,
        "category": "Tools",
        "duration": 426,
        "published_at": "2018-04-17T04:30:00+00:00"
    },
    {
        "id": 316,
        "plus": false,
        "title": "Debugging User Interface Issues",
        "excerpt": "In the previous episode, we explored Xcode's built-in view debugger and you learned how the view debugger can help debug problems related to the user interface. Remember from the previous episode that I introduced several user interface issues in Cloudy. Let's find out how we can leverage the view debugger to discover and resolve these issues.",
        "swift": 4,
        "xcode": 9,
        "platform_name": "ios",
        "platform_version": 11,
        "author": "Jim Johnson",
        "thumbnail_url": "https://cocoacasts.s3.amazonaws.com/debugging-applications-with-xcode-debugging-user-interface-issues/debugging-applications-with-xcode-debugging-user-interface-issues.svg",
        "collection": "Debugging Applications With Xcode",
        "category": "Xcode",
        "duration": 426,
        "published_at": "2018-04-10T04:30:00+00:00"
    },
    {
        "id": 315,
        "plus": true,
        "title": "View and View Controller Debugging",
        "excerpt": "The past episodes of this series have illustrated how useful breakpoints can be for debugging problems. But Xcode has more in store for us. Not every problem can or should be debugged with breakpoints. Issues related to the user interface of your application are often best tackled with Xcode's built-in view debugger. In this episode, we explore the view debugger built into Xcode.",
        "swift": 4,
        "xcode": 9,
        "platform_name": "ios",
        "platform_version": 11,
        "author": "Jim Johnson",
        "thumbnail_url": "https://cocoacasts.s3.amazonaws.com/debugging-applications-with-xcode-view-and-view-controller-debugging/debugging-applications-with-xcode-view-and-view-controller-debugging.svg",
        "collection": "Debugging Applications With Xcode",
        "category": "Xcode",
        "duration": 426,
        "published_at": "2018-04-03T04:30:00+00:00"
    },
    {
        "id": 314,
        "plus": true,
        "title": "Test Failure and Constraint Error Breakpoints",
        "excerpt": "The test failure and constraint error breakpoints are lesser known breakpoint types. When used correctly, however, they can be quite useful. Let's start with the test failure breakpoint.",
        "swift": 4,
        "xcode": 9,
        "platform_name": "ios",
        "platform_version": 11,
        "author": "Jim Johnson",
        "thumbnail_url": "https://cocoacasts.s3.amazonaws.com/debugging-applications-with-xcode-test-failure-and-constraint-error-breakpoints/debugging-applications-with-xcode-test-failure-and-constraint-error-breakpoints.svg",
        "collection": "Debugging Applications With Xcode",
        "category": "Xcode",
        "duration": 426,
        "published_at": "2018-03-27T04:30:00+00:00"
    },
    {
        "id": 313,
        "plus": true,
        "title": "Swift Error and Exception Breakpoints",
        "excerpt": "Error handling is a key aspect of the Swift language. In several ways errors in Swift are similar to exceptions in Objective-C and C++. Both errors and exceptions indicate that something didn't go as planned. The Swift error and exception breakpoints are useful to debug scenarios in which errors or exceptions are thrown.",
        "swift": 4,
        "xcode": 9,
        "platform_name": "ios",
        "platform_version": 11,
        "author": "Jim Johnson",
        "thumbnail_url": "https://cocoacasts.s3.amazonaws.com/debugging-applications-with-xcode-swift-error-and-exception-breakpoints/debugging-applications-with-xcode-swift-error-and-exception-breakpoints.svg",
        "collection": "Debugging Applications With Xcode",
        "category": "Xcode",
        "duration": 426,
        "published_at": "2018-03-20T05:30:00+00:00"
    },
    {
        "id": 312,
        "plus": true,
        "title": "Symbolic Breakpoints",
        "excerpt": "Earlier in this series, I briefly listed the types of breakpoints you can use in Xcode. In the previous episode, we focused on file and line breakpoints. This episode zooms in on symbolic breakpoints.",
        "swift": 4,
        "xcode": 9,
        "platform_name": "ios",
        "platform_version": 11,
        "author": "Jim Johnson",
        "thumbnail_url": "https://cocoacasts.s3.amazonaws.com/debugging-applications-with-xcode-symbolic-breakpoints/debugging-applications-with-xcode-symbolic-breakpoints.svg",
        "collection": "Debugging Applications With Xcode",
        "category": "Xcode",
        "duration": 426,
        "published_at": "2018-03-13T05:30:00+00:00"
    },
    {
        "id": 311,
        "plus": true,
        "title": "Managing and Editing Breakpoints",
        "excerpt": "When you're debugging a complex problem, you quickly end up with dozens of breakpoints scattered across your project or workspace. I'd like to start this episode by showing you how you can stay on top of the breakpoints in a project or workspace.",
        "swift": 4,
        "xcode": 9,
        "platform_name": "ios",
        "platform_version": 11,
        "author": "Jim Johnson",
        "thumbnail_url": "https://cocoacasts.s3.amazonaws.com/debugging-applications-with-xcode-managing-and-editing-breakpoints/debugging-applications-with-xcode-managing-and-editing-breakpoints.svg",
        "collection": "Debugging Applications With Xcode",
        "category": "Xcode",
        "duration": 426,
        "published_at": "2018-03-06T05:30:00+00:00"
    },
    {
        "id": 310,
        "plus": true,
        "title": "Stepping Through Code With Breakpoints",
        "excerpt": "Breakpoints are indispensable for debugging problems in a software project. Debugging an application with breakpoints can appear complex at first, but it isn't difficult once you understand what's going on. While the underlying concept of debugging with breakpoints is simple, you can make it as complex as you want.",
        "swift": 4,
        "xcode": 9,
        "platform_name": "ios",
        "platform_version": 11,
        "author": "Jim Johnson",
        "thumbnail_url": "https://cocoacasts.s3.amazonaws.com/debugging-applications-with-xcode-stepping-through-code-with-breakpoints/debugging-applications-with-xcode-stepping-through-code-with-breakpoints.svg",
        "collection": "Debugging Applications With Xcode",
        "category": "Xcode",
        "duration": 426,
        "published_at": "2018-02-27T05:30:00+00:00"
    },
    {
        "id": 309,
        "plus": true,
        "title": "Loading Seed Data From a Remote Server",
        "excerpt": "In the previous episode, you learned how to load seed data from a file in the application's bundle. It's a common option that isn't that hard to implement. Once you've laid the groundwork, though, the seed data can come from anywhere. Let me show you what changes we need to make to seed the persistent store with data fetched from a remote server.",
        "swift": 4,
        "xcode": 9,
        "platform_name": "ios",
        "platform_version": 11,
        "author": "Jim Johnson",
        "thumbnail_url": "https://cocoacasts.s3.amazonaws.com/seeding-a-core-data-persistent-store-loading-seed-data-from-a-remote-server/seeding-a-core-data-persistent-store-loading-seed-data-from-a-remote-server.svg",
        "collection": "Seeding a Core Data Persistent Store",
        "category": "Core Data",
        "duration": 426,
        "published_at": "2018-02-20T05:30:00+00:00"
    },
    {
        "id": 308,
        "plus": true,
        "title": "Loading Seed Data From a File",
        "excerpt": "Hard-coding seed data is quick and easy, but it's not my preferred solution. Loading seed data from a file is a strategy I like more. The idea is simple. You include a file with seed data in the application bundle. The file is loaded at runtime and its contents parsed. The contents is used to seed the persistent store with data.",
        "swift": 4,
        "xcode": 9,
        "platform_name": "ios",
        "platform_version": 11,
        "author": "Jim Johnson",
        "thumbnail_url": "https://cocoacasts.s3.amazonaws.com/seeding-a-core-data-persistent-store-loading-seed-data-from-a-file/seeding-a-core-data-persistent-store-loading-seed-data-from-a-file.svg",
        "collection": "Seeding a Core Data Persistent Store",
        "category": "Core Data",
        "duration": 426,
        "published_at": "2018-02-19T05:30:00+00:00"
    }
]
